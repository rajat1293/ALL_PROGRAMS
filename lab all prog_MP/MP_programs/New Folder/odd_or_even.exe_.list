EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
odd_or_even.exe_ -- emu8086 assembler version: 4.02  
 
[ 5/9/2013  --  4:35:49 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .data
[   3]    0000: 65 6E 74 65 72 20 6E 75 6D 62 65 72   a db "enter number$"
                24                                  
[   4]    000D: 6F 64 64 24                           b db "odd$"
[   5]    0011: 65 76 65 6E 24                        c db "even$"
[   6]        :                                       .code
[   7]    0020:                                       start:
[   8]    0020: B8 00 00                              mov ax,@data
[   9]    0023: 8E D8                                 mov ds,ax
[  10]    0025: BA 00 00                              mov dx,offset a
[  11]    0028: B4 09                                 mov ah,09h
[  12]    002A: CD 21                                 int 21h
[  13]    002C: B4 01                                 mov ah,01h
[  14]    002E: CD 21                                 int 21h
[  15]    0030: 8A F8                                 mov bh,al
[  16]    0032: B4 01                                 mov ah,01h
[  17]    0034: CD 21                                 int 21h
[  18]    0036: 8A D8                                 mov bl,al
[  19]    0038: 8B C3                                 mov ax,bx
[  20]    003A: 2D 30 30                              sub ax,3030h
[  21]    003D: D5 0A                                 AAD
[  22]    003F: D1 D8                                 Rcr ax,01h
[  23]    0041: 72 14                                 jc g
[  24]    0043:                                       d:
[  25]    0043: B2 0A                                 mov dl,0ah
[  26]    0045: B4 02                                 mov ah,02h
[  27]    0047: CD 21                                 int 21h
[  28]    0049: B8 00 00                              mov ax,@data
[  29]    004C: 8E D8                                 mov ds,ax
[  30]    004E: BA 11 00                              mov dx,offset c
[  31]    0051: B4 09                                 mov ah,09h
[  32]    0053: CD 21                                 int 21h
[  33]    0055: EB 12                                 jmp e
[  34]    0057:                                       g:
[  35]    0057: B2 0A                                 mov dl,0ah
[  36]    0059: B4 02                                 mov ah,02h
[  37]    005B: CD 21                                 int 21h
[  38]    005D: B8 00 00                              mov ax,@data
[  39]    0060: 8E D8                                 mov ds,ax
[  40]    0062: BA 0D 00                              mov dx,offset b
[  41]    0065: B4 09                                 mov ah,09h
[  42]    0067: CD 21                                 int 21h
[  43]    0069:                                       e:
[  44]        :                                       end start
[  45]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 69      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 03      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 25      -   check sum (l.byte)
0013: 75      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 02      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 02      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022: 2A      -   relocation table - offset inside segment (l.byte)
0023: 00      -   relocation table - offset inside segment (h.byte)
0024: 02      -   relocation table - segment anchor (l.byte)
0025: 00      -   relocation table - segment anchor (h.byte)
0026: 3E      -   relocation table - offset inside segment (l.byte)
0027: 00      -   relocation table - offset inside segment (h.byte)
0028: 02      -   relocation table - segment anchor (l.byte)
0029: 00      -   relocation table - segment anchor (h.byte)
002A to 01FF  -   reserved relocation area  (00) 




===================================================================================================
